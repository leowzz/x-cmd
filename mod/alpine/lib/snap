# shellcheck shell=dash

# Scenario 1:
# xal snap yq --version

# xal snap --apk yq yq --version


# Scenario 2:
# xal refit --apk yq xal/yq
# xal snap --image yq xal/yq --version


# Scenario 3:
# xal refit --apk yq --image yq
# xal daemon run --name yq xal/yq
# xal daemon snap yq yq


# go version
# x alpine refit --go github.com/x-cmd.org/gosop@latest -i xal/gosop
# x alpine snap --image gosop gosop "$@"

# Scenario 5: how to use solo in alpine ...
# x alpine snap x a.py
# xal x a.py -> using root ?
# x a.py

___X_CMD_ALPINE_APK_CACHE="$___X_CMD_ROOT_CACHE/alpine/apk/cache"


___x_cmd_alpine_snap(){
    # LIST='START_OPTS RUN_TOPS name image usecache daemon' arg:local:empty

    local START_OPTS=""
    local RUN_OPTS=""

    local name=""
    local image=""

    local REFIT_SYS=""
    local REFIT_PKG=""

    local x_=""

    local usecache=""

    local daemon=""

    arg:init alpine
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)              ___x_cmd help -m alpine snap "$@"; return 0 ;;

            -)                      name=x;             shift 1 ;;
            -n|--name)              name="$2";          arg:2:shift ;;

            -c|--cache)             usecache=1;         shift 1 ;;
            --img|--image)          image="$2";         arg:2:shift ;;      # Or provide a magic, like  xal =jdk


            -d|--daemon)            daemon=1;           shift 1 ;;

            -v|--volume)            arg:add START_OPTS "$1"      "$2" ;   arg:2:shift ;;
            -p|--port)              arg:add START_OPTS --port    "$2" ;   arg:2:shift ;;
            --net|--network)        arg:add START_OPTS --network "$2" ;   arg:2:shift ;;


            --dind|--home|--priv|--*=*)
                                    arg:add START_OPTS "$1" ;             shift 1 ;;

            /p|--pwd)
                                    arg:add START_OPTS  --pwd ;
                                    arg:add RUN_OPTS    --workdir /p ;    shift 1 ;;

            /ws|--ws)
                                    shift 1 ;;

            --user)                 arg:add RUN_OPTS --user "$2" ;        arg:2:shift ;;
            -r|--root)              arg:add RUN_OPTS --user root ;        shift 1 ;;

            --apk|--pip|--npm|--deno|--bun|--go|--cargo|--pixi|--xenv)
                                    REFIT_SYS="${1}";   REFIT_PKG="${2}"; arg:2:shift ;;

            --*)                    arg:invalid:ret:64 ;;

            # Inner use, don't document.
            -*)                     image="${___X_CMD_ALPINE_PREFIX}$1"; shift 1 ;;

            *)                      break ;;
        esac
    done

    [ -z "$usecache" ] || arg:add START_OPTS -v "$___X_CMD_ALPINE_APK_CACHE":/etc/apk/cache

    local cmd="$1";

    if [ -n "$daemon" ] && [ -z "$name" ]; then
        N=alpine M="Please provide container name for daemon -> $name" log:ret:64
    fi

    [ -z "$name" ] || {
        case "$name" in
            ${___X_CMD_ALPINE_PREFIX}-*)    ;;
            *)      N=alpine M="Please provide container name with prefix -> ${___X_CMD_ALPINE_PREFIX}-" log:ret:64
        esac
    }

    [ -n "$image" ] || {
        ___x_cmd_alpine_snap___prepareimage_ || return $?
        image="$x_"
    }

    case "$image" in
        "$___X_CMD_ALPINE_PREFIX-"*)    ;;
        *)  N=alpine M="Image name should be prefixed with '${___X_CMD_ALPINE_PREFIX}-'" log:ret:64
    esac

    ___x_cmd_alpine_snap___run "$@"
}

___x_cmd_alpine_snap___prepareimage_(){
    x_="${___X_CMD_ALPINE_PREFIX}-base"

    if [ -z "$REFIT_SYS" ]; then
        # ___x_cmd docker cmdinfo iscreated "$x_"  # It could be outdated.
        ___x_cmd_alpine_image_prepare_                  || \
            N=alpine M="Fail to prepare base image -> $x_" log:ret:1

        ! ___x_cmd docker cmdinfo hascmd "$x_" "$cmd"       || return 0

        case "$cmd" in
            ""|*/*)     return 0    ;;     # */* might be a binpath ...
            *)
                        REFIT_SYS=--apk
                        REFIT_PKG="$cmd"
        esac
    fi

    ___x_cmd_alpine_image_prepare_ "$REFIT_SYS" "$REFIT_PKG" || \
        N=alpine M="Fail to prepare image -> $x_" log:ret:1
}

___x_cmd_alpine_snap___run(){
    if [ -n "$daemon" ]; then
        ___x_cmd cmdstr RUN_OPTS -d
    else
        [ ! -t 0 ]          || ___x_cmd cmdstr RUN_OPTS --tty
        # ___x_cmd cmdstr RUN_OPTS --tty
        ___x_cmd cmdstr RUN_OPTS --init -i
    fi

    if [ -z "$name" ]; then
        name="${___X_CMD_ALPINE_PREFIX}-$$"
        ___x_cmd cmdstr RUN_OPTS --rm
        alpine:debug            \
            --image "$image"    \
            "Starting anonymous [container=$name], with auto-remove enabled."
    else
        alpine:info             \
            --image "$image"    \
            --FYI-cmd-to-remove-container "docker rm -f $name" \
            "Named container detected; Container will remain after execution. Auto-removal ( --rm ) is disabled."
    fi

    # alpine:debug    \
    #     ___x_cmd docker run                     \
    #     "$START_OPTS" --name "${name}"          \
    #     "$RUN_OPTS" "$image" "\"\$@\""

    eval ___x_cmd docker run                    \
        "$START_OPTS" --name "${name}"          \
        "$RUN_OPTS" "$image" "\"\$@\""
}

